## Reading in study information
studyid <- read.csv("data/study_id.csv") %>%
select(-start_type)
#### Overall counts -------------------------------------------------------------------------------
#Removing the severity data for 75_23 because it is the same people as the full study data in 75_1023
countList <- dataList[!names(dataList) %in% c("79_1023_sev")]
pull_first_row <- function(paper){
first_row <- paper %>%
group_by(cohort_id) %>%
arrange(interval_l) %>%
select(study_id, paper_id, cohort_id, n, c1a, c2) %>%
mutate(paper_id = as.character(paper_id),
study_id = as.character(study_id)) %>%
slice(1)
return(first_row)
}
cohorts <- map_dfr(countList, pull_first_row)
#Number of papers
length(unique(cohorts$paper_id))
#Number of studies
length(unique(cohorts$study_id))
#Number of cohorts
length(unique(cohorts$cohort_id))
#Number of patients
sum(cohorts$n)
#Subset to TB mortality data
mortality <- cohorts %>% filter(!is.na(c1a))
length(unique(mortality$study_id))
length(unique(mortality$cohort_id))
#Subset to cure data
cure <- cohorts %>%
filter(!is.na(c2) | study_id == "5_1047") %>%
bind_rows(select(dataList$`79_1023_sev`, study_id, paper_id, cohort_id, n, c1a, c2))
length(unique(cure$study_id))
length(unique(cure$cohort_id))
#### Mortality Data -------------------------------------------------------------------------------
mortalityList <- dataList[!names(dataList) %in% c("65", "91", "75_1019", "75_1020", "75_1021",
"75_1019", "75_1019", "75_1021", "79_1054")]
#Converting the study data to individual mortality data
indAll <- map_dfr(mortalityList, studyToInd, outcome = "mortality")
#Formatting individual dataset
mortalityData <- indAll %>%
#filter(!(death == 0 & interval_l == 0)) %>%
mutate(start_type = ifelse(start_type == "Unknown", "Entry", start_type),
#Adding overall average length of stay to bring start_type = 'Exit' start_type = 'Entry'
interval_l = ifelse(start_type == "Exit", interval_l + 165/365, interval_l),
interval_r = ifelse(start_type == "Exit", interval_r + 165/365, interval_r),
severity = ifelse(severity %in% c("Incipient disease",
"Minimal disease",
"Stage I",
"TB plus I (early)"), "Minimal",
ifelse(severity %in% c("Moderately advanced disease",
"Stage II",
"TB plus II (intermediate)"), "Moderate",
ifelse(severity %in% c("Far advanced disease",
"Stage III",
"TB plus III (advanced)"), "Advanced",
"Unknown"))),
severity = factor(severity, levels = c("Minimal", "Moderate", "Advanced", "Unknown"))) %>%
unite(study_sev, study_id, severity, remove = FALSE) %>%
left_join(studyid, by = "study_id") %>%
arrange(study_sev)
a <- mortalityData %>% filter(!(death == 0 & interval_l == 0))
#Formatting individual dataset
mortalityData <- indAll %>%
mutate(no_survival = death == 0 & interval_l == 0,
start_type = ifelse(start_type == "Unknown", "Entry", start_type),
#Adding overall average length of stay to bring start_type = 'Exit' start_type = 'Entry'
interval_l = ifelse(start_type == "Exit", interval_l + 165/365, interval_l),
interval_r = ifelse(start_type == "Exit", interval_r + 165/365, interval_r),
severity = ifelse(severity %in% c("Incipient disease",
"Minimal disease",
"Stage I",
"TB plus I (early)"), "Minimal",
ifelse(severity %in% c("Moderately advanced disease",
"Stage II",
"TB plus II (intermediate)"), "Moderate",
ifelse(severity %in% c("Far advanced disease",
"Stage III",
"TB plus III (advanced)"), "Advanced",
"Unknown"))),
severity = factor(severity, levels = c("Minimal", "Moderate", "Advanced", "Unknown"))) %>%
unite(study_sev, study_id, severity, remove = FALSE) %>%
left_join(studyid, by = "study_id") %>%
arrange(study_sev)
table(mortalityData$no_survival)
#Formatting individual dataset
mortalityData <- indAll %>%
mutate(#People who are censored at the study start
no_survival = death == 0 & interval_l == 0,
start_type = ifelse(start_type == "Unknown", "Entry", start_type),
#Adding overall average length of stay to bring start_type = 'Exit' start_type = 'Entry'
interval_l = ifelse(start_type == "Exit", interval_l + 165/365, interval_l),
interval_r = ifelse(start_type == "Exit", interval_r + 165/365, interval_r),
severity = ifelse(severity %in% c("Incipient disease",
"Minimal disease",
"Stage I",
"TB plus I (early)"), "Minimal",
ifelse(severity %in% c("Moderately advanced disease",
"Stage II",
"TB plus II (intermediate)"), "Moderate",
ifelse(severity %in% c("Far advanced disease",
"Stage III",
"TB plus III (advanced)"), "Advanced",
"Unknown"))),
severity = factor(severity, levels = c("Minimal", "Moderate", "Advanced", "Unknown"))) %>%
unite(study_sev, study_id, severity, remove = FALSE) %>%
left_join(studyid, by = "study_id") %>%
arrange(study_sev)
table(mortalityData$no_survival)
#Creating interval variables
#interval = 1 implies x1 < t <= x2
#dinterval() isn't working as it should so make all obs have interval = 1
#and set x2 to be 10000 (close enough to infinity) for right censored
mortality <- mortality %>%
#Removing people who are censored at the study start
filter(no_survival == FALSE) %>%
mutate(time = ifelse(death_tb == 0, NA, interval_l),
interval = 1,
x1 = interval_l,
x2 = ifelse(death_tb == 0, 10000, interval_r))
#Sarah V. Leavitt
#Boston University
#Pre-chemotherapy TB Analysis
##############################################################################
# This program contains the functions to perform the mortality Bayesian
# meta-analysis for the combined model and stratified models.
# This program takes about 1 hour to run.
##############################################################################
options(scipen=999)
options(digits = 10)
set.seed(150183)
rm(list = ls())
source("R/utils.R")
reload_source()
#Reading in individual mortality data
mortality <- read.csv("data/mortality_data_new.csv")
#### MCMC Model Function -------------------------------------------------------
m_comp <- function(){
for(j in 1:n_frail){
#Frailty for each study
ui[j] ~ dnorm(mu, tau)
#Meanlog of lognormal distribution for each study
meanlog[j] <- ui[j]
#Median of lognormal distribution for each study
med_ind[j] <- exp(meanlog[j])
#Prediction of 1/5/10 year survival
pred1[j] <- 1 - plnorm(1, meanlog[j], taulog)
pred5[j] <- 1 - plnorm(5, meanlog[j], taulog)
pred10[j] <- 1 - plnorm(10, meanlog[j], taulog)
}
for(i in 1:N){
#Setting up the survival model
interval[i] ~ dinterval(time[i], lim[i, ])
time[i] ~ dlnorm(meanlog[frail[i]], taulog)
}
#Priors
mu ~ dnorm(0, 0.0001)
taulog ~ dgamma(1, 1)
tau ~ dgamma(1, 1)
#Prediction for confidence bands
for(t in 1:30){
pred_comp[t] <- 1 - plnorm(t, mu, taulog)
}
## Derived parameters ##
#Variance of the frailty distribution
theta <- 1/tau
#sdlog of all survival densities (study-specific and overall)
sdlog <- sqrt(1/taulog)
#Overall median
med_comp <- exp(mu)
}
#Parameters to track
par_comp <- c("mu", "theta", "sdlog", "med_comp", "meanlog", "med_ind",
"pred_comp", "pred1", "pred5", "pred10")
#### Function to Run the Models ------------------------------------------------
run_comp <- function(df, n.iter = 31000, n.burnin = 1000, n.thin = 30){
#Create MCMC dataset
dt <- list(N = nrow(df),
interval = df$interval,
lim = cbind(df$x1, df$x2),
time = rep(NA, nrow(df)),
n_frail = length(unique(df$study_id_num)),
frail = df$study_id_num
)
#Fitting the model
fit <- jags(data = dt, model.file = m_comp,
parameters.to.save = par_comp,
n.iter = n.iter, n.burnin = n.burnin,
n.chains = 1, n.thin = n.thin)
#Extracting results
mcmc <- as.mcmc(fit)
eval <- mcmc[, c("mu", "theta", "sdlog")]
res <- as.data.frame(summary(mcmc)$quantiles)
return(list("res" = res, "eval" = eval))
}
#### Running the Model ---------------------------------------------------------
#Creating interval variables
#interval = 1 implies x1 < t <= x2
#dinterval() isn't working as it should so make all obs have interval = 1
#and set x2 to be 10000 (close enough to infinity) for right censored
mortality <- mortality %>%
#Removing people who are censored at the study start
filter(no_survival == FALSE) %>%
mutate(time = ifelse(death_tb == 0, NA, interval_l),
interval = 1,
x1 = interval_l,
x2 = ifelse(death_tb == 0, 10000, interval_r))
write.csv(mortalityData, "data/mortality_data_new.csv", row.names = FALSE)
write.csv(mortalityData, "data/mortality_data.csv", row.names = FALSE)
#Sarah V. Leavitt
#Boston University
#Pre-chemotherapy TB Analysis
##############################################################################
# This program transforms the life-table study data extracted from the
# publications and transforms it into individual-level data
##############################################################################
options(scipen=999)
options(digits = 10)
rm(list = ls())
source("R/utils.R")
reload_source()
## Reading in all of the datasets
dataList <- read_excel_allsheets("data/pre_chemo_data.xlsx")
dataList$`Data dictionary` <- NULL
## Reading in study information
studyid <- read.csv("data/study_id.csv") %>%
select(-start_type)
#### Overall counts -------------------------------------------------------------------------------
#Removing the severity data for 75_23 because it is the same people as the full study data in 75_1023
countList <- dataList[!names(dataList) %in% c("79_1023_sev")]
pull_first_row <- function(paper){
first_row <- paper %>%
group_by(cohort_id) %>%
arrange(interval_l) %>%
select(study_id, paper_id, cohort_id, n, c1a, c2) %>%
mutate(paper_id = as.character(paper_id),
study_id = as.character(study_id)) %>%
slice(1)
return(first_row)
}
cohorts <- map_dfr(countList, pull_first_row)
#Number of papers
length(unique(cohorts$paper_id))
#Number of studies
length(unique(cohorts$study_id))
#Number of cohorts
length(unique(cohorts$cohort_id))
#Number of patients
sum(cohorts$n)
#Subset to TB mortality data
mortality <- cohorts %>% filter(!is.na(c1a))
length(unique(mortality$study_id))
length(unique(mortality$cohort_id))
#Subset to cure data
cure <- cohorts %>%
filter(!is.na(c2) | study_id == "5_1047") %>%
bind_rows(select(dataList$`79_1023_sev`, study_id, paper_id, cohort_id, n, c1a, c2))
length(unique(cure$study_id))
length(unique(cure$cohort_id))
#### Mortality Data -------------------------------------------------------------------------------
mortalityList <- dataList[!names(dataList) %in% c("65", "91", "75_1019", "75_1020", "75_1021",
"75_1019", "75_1019", "75_1021", "79_1054")]
#Converting the study data to individual mortality data
indAll <- map_dfr(mortalityList, studyToInd, outcome = "mortality")
#Formatting individual dataset
mortalityData <- indAll %>%
mutate(#People who are censored at the study start
no_survival = death == 0 & interval_l == 0,
start_type = ifelse(start_type == "Unknown", "Entry", start_type),
#Adding overall average length of stay to bring start_type = 'Exit' start_type = 'Entry'
interval_l = ifelse(start_type == "Exit", interval_l + 165/365, interval_l),
interval_r = ifelse(start_type == "Exit", interval_r + 165/365, interval_r),
severity = ifelse(severity %in% c("Incipient disease",
"Minimal disease",
"Stage I",
"TB plus I (early)"), "Minimal",
ifelse(severity %in% c("Moderately advanced disease",
"Stage II",
"TB plus II (intermediate)"), "Moderate",
ifelse(severity %in% c("Far advanced disease",
"Stage III",
"TB plus III (advanced)"), "Advanced",
"Unknown"))),
severity = factor(severity, levels = c("Minimal", "Moderate", "Advanced", "Unknown"))) %>%
unite(study_sev, study_id, severity, remove = FALSE) %>%
left_join(studyid, by = "study_id") %>%
arrange(study_sev)
write.csv(mortalityData, "data/mortality_data.csv", row.names = FALSE)
#Sarah V. Leavitt
#Boston University
#Pre-chemotherapy TB Analysis
##############################################################################
# This program contains the functions to perform the mortality Bayesian
# meta-analysis for the combined model and stratified models.
# This program takes about 1 hour to run.
##############################################################################
options(scipen=999)
options(digits = 10)
set.seed(150183)
rm(list = ls())
source("R/utils.R")
reload_source()
#Reading in individual mortality data
mortality <- read.csv("data/mortality_data_new.csv")
#### MCMC Model Function -------------------------------------------------------
m_comp <- function(){
for(j in 1:n_frail){
#Frailty for each study
ui[j] ~ dnorm(mu, tau)
#Meanlog of lognormal distribution for each study
meanlog[j] <- ui[j]
#Median of lognormal distribution for each study
med_ind[j] <- exp(meanlog[j])
#Prediction of 1/5/10 year survival
pred1[j] <- 1 - plnorm(1, meanlog[j], taulog)
pred5[j] <- 1 - plnorm(5, meanlog[j], taulog)
pred10[j] <- 1 - plnorm(10, meanlog[j], taulog)
}
for(i in 1:N){
#Setting up the survival model
interval[i] ~ dinterval(time[i], lim[i, ])
time[i] ~ dlnorm(meanlog[frail[i]], taulog)
}
#Priors
mu ~ dnorm(0, 0.0001)
taulog ~ dgamma(1, 1)
tau ~ dgamma(1, 1)
#Prediction for confidence bands
for(t in 1:30){
pred_comp[t] <- 1 - plnorm(t, mu, taulog)
}
## Derived parameters ##
#Variance of the frailty distribution
theta <- 1/tau
#sdlog of all survival densities (study-specific and overall)
sdlog <- sqrt(1/taulog)
#Overall median
med_comp <- exp(mu)
}
#Parameters to track
par_comp <- c("mu", "theta", "sdlog", "med_comp", "meanlog", "med_ind",
"pred_comp", "pred1", "pred5", "pred10")
#### Function to Run the Models ------------------------------------------------
run_comp <- function(df, n.iter = 31000, n.burnin = 1000, n.thin = 30){
#Create MCMC dataset
dt <- list(N = nrow(df),
interval = df$interval,
lim = cbind(df$x1, df$x2),
time = rep(NA, nrow(df)),
n_frail = length(unique(df$study_id_num)),
frail = df$study_id_num
)
#Fitting the model
fit <- jags(data = dt, model.file = m_comp,
parameters.to.save = par_comp,
n.iter = n.iter, n.burnin = n.burnin,
n.chains = 1, n.thin = n.thin)
#Extracting results
mcmc <- as.mcmc(fit)
eval <- mcmc[, c("mu", "theta", "sdlog")]
res <- as.data.frame(summary(mcmc)$quantiles)
return(list("res" = res, "eval" = eval))
}
#### Running the Model ---------------------------------------------------------
#Creating interval variables
#interval = 1 implies x1 < t <= x2
#dinterval() isn't working as it should so make all obs have interval = 1
#and set x2 to be 10000 (close enough to infinity) for right censored
mortality <- mortality %>%
#Removing people who are censored at the study start
filter(no_survival == FALSE) %>%
mutate(time = ifelse(death_tb == 0, NA, interval_l),
interval = 1,
x1 = interval_l,
x2 = ifelse(death_tb == 0, 10000, interval_r))
#Sarah V. Leavitt
#Boston University
#Pre-chemotherapy TB Analysis
##############################################################################
# This program transforms the life-table study data extracted from the
# publications and transforms it into individual-level data
##############################################################################
options(scipen=999)
options(digits = 10)
rm(list = ls())
source("R/utils.R")
reload_source()
## Reading in all of the datasets
dataList <- read_excel_allsheets("data/pre_chemo_data.xlsx")
dataList$`Data dictionary` <- NULL
## Reading in study information
studyid <- read.csv("data/study_id.csv") %>%
select(-start_type)
#### Overall counts -------------------------------------------------------------------------------
#Removing the severity data for 75_23 because it is the same people as the full study data in 75_1023
countList <- dataList[!names(dataList) %in% c("79_1023_sev")]
pull_first_row <- function(paper){
first_row <- paper %>%
group_by(cohort_id) %>%
arrange(interval_l) %>%
select(study_id, paper_id, cohort_id, n, c1a, c2) %>%
mutate(paper_id = as.character(paper_id),
study_id = as.character(study_id)) %>%
slice(1)
return(first_row)
}
cohorts <- map_dfr(countList, pull_first_row)
#Number of papers
length(unique(cohorts$paper_id))
#Number of studies
length(unique(cohorts$study_id))
#Number of cohorts
length(unique(cohorts$cohort_id))
#Number of patients
sum(cohorts$n)
#Subset to TB mortality data
mortality <- cohorts %>% filter(!is.na(c1a))
length(unique(mortality$study_id))
length(unique(mortality$cohort_id))
#Subset to cure data
cure <- cohorts %>%
filter(!is.na(c2) | study_id == "5_1047") %>%
bind_rows(select(dataList$`79_1023_sev`, study_id, paper_id, cohort_id, n, c1a, c2))
length(unique(cure$study_id))
length(unique(cure$cohort_id))
#### Mortality Data -------------------------------------------------------------------------------
mortalityList <- dataList[!names(dataList) %in% c("65", "91", "75_1019", "75_1020", "75_1021",
"75_1019", "75_1019", "75_1021", "79_1054")]
#Converting the study data to individual mortality data
indAll <- map_dfr(mortalityList, studyToInd, outcome = "mortality")
#Formatting individual dataset
mortalityData <- indAll %>%
mutate(#People who are censored at the study start
no_survival = death == 0 & interval_l == 0,
start_type = ifelse(start_type == "Unknown", "Entry", start_type),
#Adding overall average length of stay to bring start_type = 'Exit' start_type = 'Entry'
interval_l = ifelse(start_type == "Exit", interval_l + 165/365, interval_l),
interval_r = ifelse(start_type == "Exit", interval_r + 165/365, interval_r),
severity = ifelse(severity %in% c("Incipient disease",
"Minimal disease",
"Stage I",
"TB plus I (early)"), "Minimal",
ifelse(severity %in% c("Moderately advanced disease",
"Stage II",
"TB plus II (intermediate)"), "Moderate",
ifelse(severity %in% c("Far advanced disease",
"Stage III",
"TB plus III (advanced)"), "Advanced",
"Unknown"))),
severity = factor(severity, levels = c("Minimal", "Moderate", "Advanced", "Unknown"))) %>%
unite(study_sev, study_id, severity, remove = FALSE) %>%
left_join(studyid, by = "study_id") %>%
arrange(study_sev)
#Reading in individual mortality data
mortality <- read.csv("data/mortality_data.csv")
#Creating interval variables
#interval = 1 implies x1 < t <= x2
#dinterval() isn't working as it should so make all obs have interval = 1
#and set x2 to be 10000 (close enough to infinity) for right censored
mortality <- mortality %>%
#Removing people who are censored at the study start
filter(no_survival == FALSE) %>%
mutate(time = ifelse(death_tb == 0, NA, interval_l),
interval = 1,
x1 = interval_l,
x2 = ifelse(death_tb == 0, 10000, interval_r))
#Subsetting and formatting data
mortality_strata <- mortality %>%
#Removing severity stratified mortality data for study 79_1023 (only 4-year follow-up)
filter(!cohort_id %in% c("79_1023_5", "79_1023_6", "79_1023_7")) %>%
mutate(study_id_num = as.numeric(factor(study_id)))
severity <- mortality %>%
filter(severity != "Unknown",
no_survival == FALSE) %>%
mutate(sanatorium = ifelse(sanatorium == "Yes", "Sanatorium/hospital",
"Non-sanatorium"),
severity = factor(severity,
levels = c("Minimal", "Moderate", "Advanced")))
study_severity <- severity %>%
group_by(study_id) %>%
summarize(n = n(),
Minimal_n = sum(severity == "Minimal"),
Moderate_n = sum(severity == "Moderate"),
Advanced_n = sum(severity == "Advanced"),
sanatorium = first(sanatorium),
first_author = first(first_author)) %>%
mutate(Minimal_p = round(100 * Minimal_n / n, 1),
Moderate_p = round(100 * Moderate_n / n, 1),
Advanced_p = round(100 * Advanced_n / n, 1),
Minimal = paste0(Minimal_n, " (", Minimal_p, "%)"),
Moderate = paste0(Moderate_n, " (", Moderate_p, "%)"),
Advanced = paste0(Advanced_n, " (", Advanced_p, "%)")) %>%
select(first_author, sanatorium, Minimal, Moderate, Advanced) %>%
arrange(sanatorium)
View(study_severity)
summary_severity <- severity %>%
group_by(sanatorium) %>%
summarize(n = n(),
Minimal_n = sum(severity == "Minimal"),
Moderate_n = sum(severity == "Moderate"),
Advanced_n = sum(severity == "Advanced")) %>%
mutate(Minimal_p = round(100 * Minimal_n / n, 1),
Moderate_p = round(100 * Moderate_n / n, 1),
Advanced_p = round(100 * Advanced_n / n, 1),
Minimal = paste0(Minimal_n, " (", Minimal_p, "%)"),
Moderate = paste0(Moderate_n, " (", Moderate_p, "%)"),
Advanced = paste0(Advanced_n, " (", Advanced_p, "%)")) %>%
select(sanatorium, Minimal, Moderate, Advanced)
View(summary_severity)
#Baseline sample size for mortality analysis
nrow(mortalityData)
