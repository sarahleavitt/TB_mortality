mortality <- mortality %>%
mutate(time = ifelse(death_tb == 0, NA, interval_l),
interval = 1,
x1 = interval_l,
x2 = ifelse(death_tb == 0, 10000, interval_r))
# n.iter <- 31000
# n.burnin <- 1000
# n.thin <- 30
n.iter <- 100
n.burnin <- 10
n.thin <- 1
#Subsetting and formatting data
mortality_strata <- mortality %>%
#Removing severity stratified mortality data for study 79_1023 (only 4-year follow-up)
filter(!cohort_id %in% c("79_1023_5", "79_1023_6", "79_1023_7")) %>%
mutate(study_id_num = as.numeric(factor(study_id)),
pre1930 = as.numeric(time_period == "pre-1930"),
northamerica = as.numeric(location == "North America"),
sanatorium = as.numeric(sanatorium == "Yes"))
#Getting information for each study
study_data <- mortality_strata %>%
group_by(study_id_num) %>%
summarize(pre1930 = first(pre1930),
northamerica = first(northamerica),
sanatorium = first(sanatorium))
output_time <- run_one_strata(mortality_strata, study_data, "pre1930",
n.iter = n.iter, n.burnin = n.burnin, n.thin = n.thin)
output_loc <- run_one_strata(mortality_strata, study_data, "northamerica",
n.iter = n.iter, n.burnin = n.burnin, n.thin = n.thin)
output_san <- run_one_strata(mortality_strata, study_data, "sanatorium",
n.iter = n.iter, n.burnin = n.burnin, n.thin = n.thin)
#### Formatting and Saving Results ---------------------------------------------
data <- getData(mortality_strata)
res_time <- output_time$res
eval_time <- output_time$eval
res_loc <- output_loc$res
eval_loc <- output_loc$eval
res_san <- output_san$res
eval_san <- output_san$eval
form_time <- formatBayesian(mortality, res_time, data, label = "Time", fixed = TRUE)
form_loc <- formatBayesian(mortality, res_loc, data, label = "Location", fixed = TRUE)
form_san <- formatBayesian(mortality, res_san, data, label = "Sanatorium", fixed = TRUE)
save(form_time, form_loc, form_san, file = "R/bayesian_onestrata.RData")
#Reading in individual mortality data and analysis results
mortality <- read.csv("data/mortality_data.csv")
load('R/bayesian_comp.RData')
load('R/bayesian_onestrata.RData')
load('R/bayesian_allstrata.RData')
load('R/bayesian_separate.RData')
#Combining raw tables from results lists
raw_tab <- bind_rows(form_comp$param, form_all,
form_time$param, form_loc$param, form_san$param,
form_pre$param, form_post$param,
form_namerica$param, form_europe$param,
form_yessan$param, form_nosan$param)
med_tab <- raw_tab %>%
filter(value == "median") %>%
mutate(`Median Survival Time (95% CI)` = paste0(round(est, 2), " (",
round(cilb, 2), ", ",
round(ciub, 2), ")")) %>%
select(label, strata, `Median Survival Time (95% CI)`)
View(med_tab)
14.81/10.65
source("R/utils.R")
reload_source()
source("R/mortality_functions.R")
#Reading in individual mortality data
mortality <- read.csv("data/mortality_data.csv")
#### MCMC Model Function -------------------------------------------------------
m_one_strata <- function(){
#Frailty for each study
for(j in 1:n_frail){
ui[j] ~ dnorm(alpha, tau)
}
for(i in 1:N){
#Meanlog of lognormal distribution for each individual
meanlog[i] <- ui[frail[i]] + bstrata*strata[i]
#Setting up the survival model
interval[i] ~ dinterval(time[i], lim[i, ])
time[i] ~ dlnorm(meanlog[i], taulog)
}
#Priors
alpha ~ dnorm(0, 0.0001)
bstrata ~ dnorm(0, 0.0001)
taulog ~ dgamma(1, 1)
tau ~ dgamma(1, 1)
#Variance of the frailty distribution
theta <- 1/tau
#sdlog of all survival densities (study-specific and overall)
sdlog <- sqrt(1/taulog)
#Overall meanlog parameter and median survival for each strata value
meanlog_strata0 <- alpha
meanlog_strata1 <- alpha + bstrata
med_strata0 <- exp(alpha)
med_strata1 <- exp(alpha + bstrata)
#Difference in median survival between strata values
med_diff <- exp(bstrata)
#Prediction for confidence bands
for(t in 1:30){
pred_strata0[t] <- 1 - plnorm(t, meanlog_strata0, taulog)
pred_strata1[t] <- 1 - plnorm(t, meanlog_strata1, taulog)
}
#study-specific meanlog of the lognormal density and median survival
for(k in 1:n_study){
meanlog_ind[k] <- ui[frail2[k]] + bstrata*study_strata[k]
med_ind[k] <- exp(meanlog_ind[k])
#Prediction of 1/5/10 year survival
pred1[k] <- 1 - plnorm(1, meanlog_ind[k], taulog)
pred5[k] <- 1 - plnorm(5, meanlog_ind[k], taulog)
pred10[k] <- 1 - plnorm(10, meanlog_ind[k], taulog)
}
}
#Parameters to track
par_one_strata <- c("theta", "sdlog", "alpha", "bstrata",
"meanlog_ind", "meanlog_strata0", "meanlog_strata1",
"med_ind", "med_strata0", "med_strata1", "med_diff",
"pred1", "pred5", "pred10", "pred_strata0", "pred_strata1")
#### Function to Run the Models ------------------------------------------------
run_one_strata <- function(df, study_data, strata_var, n.iter = 61000,
n.burnin = 1000, n.thin = 30){
study_data <- as.data.frame(study_data)
#Creating MCMC dataset
dt <- list(N = nrow(df),
interval = df$interval,
lim = cbind(df$x1, df$x2),
time = rep(NA, nrow(df)),
n_frail = length(unique(df$study_id_num)),
frail = df$study_id_num,
strata = df[, strata_var],
n_study = nrow(study_data),
frail2 = study_data$study_id_num,
study_strata = study_data[, strata_var]
)
#Fitting model
fit <- jags(data = dt, model.file = m_one_strata,
parameters.to.save = par_one_strata,
n.iter = n.iter, n.burnin = n.burnin,
n.chains = 1, n.thin = n.thin)
#Extracting results
mcmc <- as.mcmc(fit)
eval <- mcmc[, c("alpha", "bstrata", "theta", "sdlog")]
res <- as.data.frame(summary(mcmc)$quantiles)
return(list("res" = res, "eval" = eval))
}
#### Running the Model ---------------------------------------------------------
#Creating interval variables
#interval = 1 implies x1 < t <= x2
#dinterval() isn't working as it should so make all obs have interval = 1
#and set x2 to be 10000 (close enough to infinity) for right censored
mortality <- mortality %>%
mutate(time = ifelse(death_tb == 0, NA, interval_l),
interval = 1,
x1 = interval_l,
x2 = ifelse(death_tb == 0, 10000, interval_r))
# n.iter <- 31000
# n.burnin <- 1000
# n.thin <- 30
n.iter <- 100
n.burnin <- 10
n.thin <- 1
#Subsetting and formatting data
mortality_strata <- mortality %>%
#Removing severity stratified mortality data for study 79_1023 (only 4-year follow-up)
filter(!cohort_id %in% c("79_1023_5", "79_1023_6", "79_1023_7")) %>%
mutate(study_id_num = as.numeric(factor(study_id)),
pre1930 = as.numeric(time_period == "pre-1930"),
northamerica = as.numeric(location == "North America"),
sanatorium = as.numeric(sanatorium == "Yes"))
table(mortality_strata$time_period, mortality_strata$pre1930)
#Getting information for each study
study_data <- mortality_strata %>%
group_by(study_id_num) %>%
summarize(pre1930 = first(pre1930),
northamerica = first(northamerica),
sanatorium = first(sanatorium))
output_time <- run_one_strata(mortality_strata, study_data, "pre1930",
n.iter = n.iter, n.burnin = n.burnin, n.thin = n.thin)
output_time$res
View(med_tab)
source("R/utils.R")
reload_source()
source("R/mortality_functions.R")
#Reading in individual mortality data
mortality <- read.csv("data/mortality_data.csv")
#### MCMC Model Function -------------------------------------------------------
m_all_strata <- function(){
#Frailty for each study
for(j in 1:n_frail){
ui[j] ~ dnorm(alpha, tau)
}
for(i in 1:N){
#Meanlog of lognormal distribution for each individual
meanlog[i] <- ui[frail[i]] + btimep*timep[i] + bloc*loc[i] + bsan*san[i]
#Setting up the survival model
interval[i] ~ dinterval(time[i], lim[i, ])
time[i] ~ dlnorm(meanlog[i], taulog)
}
#Priors
alpha ~ dnorm(0, 0.0001)
btimep ~ dnorm(0, 0.0001)
bloc ~ dnorm(0, 0.0001)
bsan ~ dnorm(0, 0.0001)
taulog ~ dgamma(1, 1)
tau ~ dgamma(1, 1)
#Variance of the frailty distribution
theta <- 1/tau
#sdlog of all survival densities (study-specific and overall)
sdlog <- sqrt(1/taulog)
#Overall median survival for one unit change in strata value
med_timep <- exp(btimep)
med_loc <- exp(bloc)
med_san <- exp(bsan)
#study-specific meanlog of the lognormal density and median survival
for(k in 1:n_study){
meanlog_ind[k] <- ui[frail2[k]] + btimep*study_timep[k] + bloc*study_loc[k] + bsan*study_san[k]
med_ind[k] <- exp(meanlog_ind[k])
#Prediction of 1/5/10 year survival
pred1[k] <- 1 - plnorm(1, meanlog_ind[k], taulog)
pred5[k] <- 1 - plnorm(5, meanlog_ind[k], taulog)
pred10[k] <- 1 - plnorm(10, meanlog_ind[k], taulog)
}
}
#Parameters to track
par_all_strata <- c("theta", "sdlog", "alpha", "btimep", "bloc", "bsan",
"med_timep", "med_loc", "med_san",
"meanlog_ind", "med_ind","pred1", "pred5", "pred10")
#### Function to Run the Models ------------------------------------------------
run_all_strata <- function(df, study_data, n.iter = 61000, n.burnin = 1000,
n.thin = 30){
#Creating MCMC dataset
dt <- list(N = nrow(df),
interval = df$interval,
lim = cbind(df$x1, df$x2),
time = rep(NA, nrow(df)),
n_frail = length(unique(df$study_id_num)),
frail = df$study_id_num,
timep = df$pre1930,
loc = df$northamerica,
san = df$sanatorium,
n_study = nrow(study_data),
frail2 = study_data$study_id_num,
study_timep = study_data$pre1930,
study_loc = study_data$northamerica,
study_san = study_data$sanatorium
)
#Fitting model
fit <- jags(data = dt, model.file = m_all_strata,
parameters.to.save = par_all_strata,
n.iter = n.iter, n.burnin = n.burnin,
n.chains = 1, n.thin = n.thin)
#Extracting results
mcmc <- as.mcmc(fit)
eval <- mcmc[, c("alpha", "btimep", "bloc", "bsan", "theta", "sdlog")]
res <- as.data.frame(summary(mcmc)$quantiles)
return(list("res" = res, "eval" = eval))
}
#### Running the Model ---------------------------------------------------------
#Creating interval variables
#interval = 1 implies x1 < t <= x2
#dinterval() isn't working as it should so make all obs have interval = 1
#and set x2 to be 10000 (close enough to infinity) for right censored
mortality <- mortality %>%
mutate(time = ifelse(death_tb == 0, NA, interval_l),
interval = 1,
x1 = interval_l,
x2 = ifelse(death_tb == 0, 10000, interval_r))
# n.iter <- 31000
# n.burnin <- 1000
# n.thin <- 30
n.iter <- 100
n.burnin <- 10
n.thin <- 1
#Subsetting and formatting data
mortality_strata <- mortality %>%
#Removing severity stratified mortality data for study 79_1023 (only 4-year follow-up)
filter(!cohort_id %in% c("79_1023_5", "79_1023_6", "79_1023_7")) %>%
mutate(study_id_num = as.numeric(factor(study_id)),
pre1930 = as.numeric(time_period == "pre-1930"),
northamerica = as.numeric(location == "North America"),
sanatorium = as.numeric(sanatorium == "Yes"))
#Getting information for each study
study_data <- mortality_strata %>%
group_by(study_id_num) %>%
summarize(pre1930 = first(pre1930),
northamerica = first(northamerica),
sanatorium = first(sanatorium))
output_all <- run_all_strata(mortality_strata, study_data, n.iter = n.iter,
n.burnin = n.burnin, n.thin = n.thin)
#### Formatting and Saving Results ---------------------------------------------
data <- getData(mortality_strata)
res_all <- output_all$res
eval_all <- output_all$eval
#Formatting data
form_all <- res_all[row.names(res_all) %in% c("sdlog", "theta", "med_timep",
"med_loc", "med_san"), ]
names(form_all) <- c("cilb", "lowerquant", "est", "upperquant", "ciub")
form_all <- form_all %>%
mutate(label = "All Strata",
value = ifelse(grepl("med", row.names(.)), "median", row.names(.)),
strata = ifelse(grepl("time", row.names(.)), "time",
ifelse(grepl("loc", row.names(.)), "location",
ifelse(grepl("san", row.names(.)), "sanatorium", NA))))
save(form_all, file = "R/bayesian_allstrata.RData")
xyplot(eval_comp)
png("Figures/xyplot_comp.png")
xyplot(eval_comp)
dev.off()
autocorr.plot(eval_comp)
png("Figures/autocorr_comp.png")
autocorr.plot(eval_comp)
dev.off()
data <- getData(mortality_strata)
res_comp <- output_comp$res
eval_comp <- output_comp$eval
form_comp <- formatBayesian(mortality, res_comp, data, "Combined")
save(form_comp, file = "R/bayesian_comp.RData")
form_comp$param
#Sarah V. Leavitt
#Boston University
#Pre-chemotherapy TB Analysis
##############################################################################
# This program transforms the life-table study data extracted from the
# publications and transforms it into individual-level data
##############################################################################
options(scipen=999)
options(digits = 10)
rm(list = ls())
source("R/utils.R")
reload_source()
## Reading in all of the datasets
dataList <- read_excel_allsheets("data/pre_chemo_data.xlsx")
dataList$`Data dictionary` <- NULL
## Reading in study information
studyid <- read.csv("data/study_id.csv")
#### Overall counts -------------------------------------------------------------------------------
#Removing the severity data for 75_23 because it is the same people as the full study data in 75_1023
countList <- dataList[!names(dataList) %in% c("79_1023_sev")]
pull_first_row <- function(paper){
first_row <- paper %>%
group_by(cohort_id) %>%
arrange(interval_l) %>%
select(study_id, paper_id, cohort_id, n, c1a, c2) %>%
mutate(paper_id = as.character(paper_id),
study_id = as.character(study_id)) %>%
slice(1)
return(first_row)
}
cohorts <- map_dfr(countList, pull_first_row)
#Number of papers
length(unique(cohorts$paper_id))
#Number of studies
length(unique(cohorts$study_id))
#Number of cohorts
length(unique(cohorts$cohort_id))
#Number of patients
sum(cohorts$n)
#Subset to TB mortality data
mortality <- cohorts %>% filter(!is.na(c1a))
length(unique(mortality$study_id))
length(unique(mortality$cohort_id))
#Subset to cure data
cure <- cohorts %>%
filter(!is.na(c2) | study_id == "5_1047") %>%
bind_rows(select(dataList$`79_1023_sev`, study_id, paper_id, cohort_id, n, c1a, c2))
length(unique(cure$study_id))
length(unique(cure$cohort_id))
#### Mortality Data -------------------------------------------------------------------------------
mortalityList <- dataList[!names(dataList) %in% c("65", "91", "75_1019", "75_1020", "75_1021",
"75_1019", "75_1019", "75_1021", "79_1054")]
#Converting the study data to individual mortality data
indAll <- map_dfr(mortalityList, studyToInd, outcome = "mortality")
#Removing people who are censored at the study start
indAll <- indAll %>% filter(!(death == 0 & interval_l == 0))
#Formatting individual dataset
mortalityData <- indAll %>%
mutate(start_type = ifelse(start_type == "Unknown", "Entry", start_type),
#Adding overall average length of stay to bring start_type = 'Exit' start_type = 'Entry'
interval_l = ifelse(start_type == "Exit", interval_l + 165/365, interval_l),
interval_r = ifelse(start_type == "Exit", interval_r + 165/365, interval_r),
severity = ifelse(severity %in% c("Incipient disease",
"Minimal disease",
"Stage I",
"TB plus I (early)"), "Minimal",
ifelse(severity %in% c("Moderately advanced disease",
"Stage II",
"TB plus II (intermediate)"), "Moderate",
ifelse(severity %in% c("Far advanced disease",
"Stage III",
"TB plus III (advanced)"), "Advanced",
"Unknown"))),
severity = factor(severity, levels = c("Minimal", "Moderate", "Advanced", "Unknown"))) %>%
unite(study_sev, study_id, severity, remove = FALSE) %>%
left_join(studyid, by = "study_id") %>%
arrange(study_sev)
write.csv(mortalityData, "data/mortality_data.csv", row.names = FALSE)
#### Cure Data with severity ----------------------------------------------------------------------
cureList <- list(dataList$`1029_1055`, dataList$`1029_1056`, dataList$`48_1000_1029`,
dataList$`45`, dataList$`67`)
## Converting the study data to individual mortality data
cureData1 <- map_dfr(cureList, studyToInd, outcome = "cure", timepoints = 3)
## Extracting four year survival from 79_1023
cureData2 <- studyToInd(dataList$`79_1023_sev`, outcome = "cure", timepoints = 4)
#Combining Info
cureData <- bind_rows(cureData1, cureData2) %>%
left_join(studyid, by = "study_id")
write.csv(cureData, "data/cure_data.csv", row.names = FALSE)
#### Table of Study Info
mortalityStudies <- mortalityData %>%
group_by(study_id) %>%
slice(1) %>%
mutate(stratified = ifelse(severity == "Unknown", "No", "Yes"),
mortality = "Yes") %>%
select(study_id, stratified, start_type, mortality)
cureStudies <- cureData %>%
group_by(study_id) %>%
slice(1) %>%
mutate(cure = "Yes") %>%
select(study_id, start_type, cure_time = time, cure)
allStudies <- mortalityStudies %>%
full_join(cureStudies, by = c("study_id", "start_type")) %>%
left_join(studyid, by = "study_id") %>%
mutate(outcome = ifelse(mortality == "Yes" & !is.na(cure), "Mortality/Cure", "Mortality")) %>%
arrange(first_author) %>%
select(study_id, first_author, year, outcome, stratified, sanatorium,
time_period, location, start_type, cure_time)
write.csv(allStudies, "data/meta_analysis_studies.csv", row.names = FALSE)
#### All Cure Data ----------------------------------------------------------------------------
cureListAll <- list(dataList$`75_1019`,dataList$`75_1020`,dataList$`75_1021`,dataList$`79_1054`,
dataList$`5_1047`,dataList$`94`, dataList$`65`,dataList$`91`,
dataList$`1029_1055`,dataList$`1029_1056`,dataList$`48_1000_1029`,
dataList$`79_1023_sev`,dataList$`45`,dataList$`67`)
cureListAll2 <- lapply(cureListAll,dblTochr)
cureDataAll <- map_dfr(cureListAll2,calcCureRate)
write.csv(cureDataAll, "data/cure_data_all.csv", row.names = FALSE)
View(studyid)
xyplot(eval_all)
autocorr.plot(eval_all)
png("Figures/xyplot_all.png")
xyplot(eval_all)
dev.off()
png("Figures/autocorr_all.png")
autocorr.plot(eval_all)
dev.off()
xyplot(eval_time)
autocorr.plot(eval_time)
png("Figures/xyplot_time.png")
xyplot(eval_time)
dev.off()
png("Figures/autocorr_time.png")
autocorr.plot(eval_time)
dev.off()
xyplot(eval_loc)
autocorr.plot(eval_loc)
png("Figures/xyplot_loc.png")
xyplot(eval_loc)
dev.off()
png("Figures/autocorr_loc.png")
autocorr.plot(eval_loc)
dev.off()
xyplot(eval_san)
autocorr.plot(eval_san)
png("Figures/xyplot_san.png")
xyplot(eval_san)
dev.off()
png("Figures/autocorr_san.png")
autocorr.plot(eval_san)
dev.off()
xyplot(eval_pre)
xyplot(eval_pre)
autocorr.plot(eval_pre)
png("Figures/xyplot_pre.png")
xyplot(eval_pre)
dev.off()
png("Figures/autocorr_pre.png")
autocorr.plot(eval_pre)
dev.off()
xyplot(eval_post)
autocorr.plot(eval_post)
png("Figures/xyplot_post.png")
xyplot(eval_post)
dev.off()
png("Figures/autocorr_post.png")
autocorr.plot(eval_post)
dev.off()
xyplot(eval_namerica)
png("Figures/xyplot_namerica.png")
xyplot(eval_namerica)
dev.off()
png("Figures/autocorr_namerica.png")
autocorr.plot(eval_namerica)
dev.off()
xyplot(eval_europe)
png("Figures/xyplot_europe.png")
xyplot(eval_europe)
dev.off()
png("Figures/autocorr_europe.png")
autocorr.plot(eval_europe)
dev.off()
xyplot(eval_yessan)
png("Figures/xyplot_yessan.png")
xyplot(eval_yessan)
dev.off()
png("Figures/autocorr_yessan.png")
autocorr.plot(eval_yessan)
dev.off()
xyplot(eval_nosan)
png("Figures/xyplot_nosan.png")
xyplot(eval_nosan)
dev.off()
png("Figures/autocorr_nosan.png")
autocorr.plot(eval_nosan)
dev.off()
